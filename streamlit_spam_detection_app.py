# -*- coding: utf-8 -*-
"""Streamlit Spam Detection App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qpNRe0VPzkZWnziELpjtbC5zVNTV95a5
"""

pip install streamlit

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
import streamlit as st

# Load the dataset
# Using latin-1 encoding as specified in the original code
data = pd.read_csv("https://raw.githubusercontent.com/amankharwal/SMS-Spam-Detection/master/spam.csv", encoding='latin-1')

# Select the relevant columns: 'class' (target) and 'message' (features)
data = data[["class", "message"]]

# Convert the 'message' column to a NumPy array
x = np.array(data["message"])
# Convert the 'class' column to a NumPy array
y = np.array(data["class"])

# Initialize the CountVectorizer to convert text data into a matrix of token counts
cv = CountVectorizer()

# Fit the CountVectorizer to the message data and transform the data
X = cv.fit_transform(x)

# Split the data into training and testing sets
# test_size=0.33 means 33% of the data will be used for testing
# random_state=42 ensures reproducibility of the split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

# Initialize the Multinomial Naive Bayes classifier
clf = MultinomialNB()

# Train the classifier on the training data
clf.fit(X_train, y_train)

# --- Streamlit App ---

# Set the title of the Streamlit application
st.title("Spam Detection System")

# Define the spam detection function
def spamdetection():
    # Create a text area for the user to enter a message or email
    user = st.text_area("Enter any Message or Email: ")

    # Check if the user has entered any text
    if len(user) < 1:
        # If no text is entered, display a blank space
        st.write("  ")
    else:
        # If text is entered, use it as the sample for prediction
        sample = user
        # Transform the user's input using the fitted CountVectorizer
        # .toarray() converts the sparse matrix output to a dense NumPy array
        data = cv.transform([sample]).toarray()
        # Predict the class (spam or not spam) of the user's input
        a = clf.predict(data)
        # Display the prediction result as a title
        st.title(a)

# Call the spam detection function to run the Streamlit app logic
spamdetection()